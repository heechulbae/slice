/**
 * generated by Xtext
 */
package org.etri.slice.tools.adl.ui.quickfix;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.ui.quickfix.XbaseQuickfixProvider;
import org.etri.slice.tools.adl.domainmodel.Context;
import org.etri.slice.tools.adl.domainmodel.Control;
import org.etri.slice.tools.adl.domainmodel.DomainDeclaration;
import org.etri.slice.tools.adl.domainmodel.DomainModel;
import org.etri.slice.tools.adl.domainmodel.Event;
import org.etri.slice.tools.adl.domainmodel.Feature;
import org.etri.slice.tools.adl.validation.IssueCodes;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class DomainmodelQuickfixProvider extends XbaseQuickfixProvider {
  @Fix(IssueCodes.INVALID_TYPE_NAME)
  public void capitalizeName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String firstLetter = xtextDocument.get((issue.getOffset()).intValue(), 1);
      xtextDocument.replace((issue.getOffset()).intValue(), 1, firstLetter.toUpperCase());
    };
    acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", _function);
  }
  
  @Fix(IssueCodes.INVALID_FEATURE_NAME)
  public void toLowercaseName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String firstLetter = xtextDocument.get((issue.getOffset()).intValue(), 1);
      xtextDocument.replace((issue.getOffset()).intValue(), 1, firstLetter.toLowerCase());
    };
    acceptor.accept(issue, "Lowercase name", "Change the name to lowercase", "lcase.png", _function);
  }
  
  @Fix(IssueCodes.DUPLICATE_ELEMENT)
  public void removeDuplicatedElement(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      final EObject container = element.eContainer();
      System.out.println(("container " + container));
      if ((container instanceof DomainModel)) {
        ((DomainModel) container).getElements().remove(element);
      } else {
        if ((container instanceof DomainDeclaration)) {
          ((DomainDeclaration) container).getElements().remove(element);
        }
      }
    };
    acceptor.accept(issue, "Remove duplicated element", "Remove duplicated element", "delete_obj.png", _function);
  }
  
  @Fix(IssueCodes.DUPLICATE_FEATURE)
  public void removeDuplicatedFeature(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      Control control = EcoreUtil2.<Control>getContainerOfType(element, Control.class);
      if ((null != control)) {
        EList<Feature> _features = null;
        if (control!=null) {
          _features=control.getFeatures();
        }
        _features.remove(element);
      }
    };
    acceptor.accept(issue, "Remove duplicated feature", "Remove duplicated feature", "delete_obj.png", _function);
  }
  
  @Fix(IssueCodes.DUPLICATE_PROPERTY)
  public void removeDuplicatedProperty(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      final EObject container = element.eContainer();
      System.out.println(("container " + container));
      if ((container instanceof Context)) {
        ((Context) container).getProperties().remove(element);
      } else {
        if ((container instanceof Event)) {
          ((Event) container).getProperties().remove(element);
        }
      }
    };
    acceptor.accept(issue, "Remove duplicated property", "Remove duplicated property", "delete_obj.png", _function);
  }
  
  @Fix(IssueCodes.CONTEXT_HIERARCHY_CYCLE)
  public void removeContextCycleInHierarchy(final Issue issue, final IssueResolutionAcceptor acceptor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Remove supertype \'<<issue.data.get(0)>>\' ");
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      ((Context) element).setSuperType(null);
    };
    acceptor.accept(issue, "Remove supertype", _builder.toString(), "delete_obj.gif", _function);
  }
  
  @Fix(IssueCodes.CONTROL_HIERARCHY_CYCLE)
  public Object removeControlCycleInHierarchy(final Issue issue, final IssueResolutionAcceptor acceptor) {
    return null;
  }
  
  @Fix(IssueCodes.EVENT_HIERARCHY_CYCLE)
  public void removeEventCycleInHierarchy(final Issue issue, final IssueResolutionAcceptor acceptor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Remove supertype \'<<issue.data.get(0)>>\' ");
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      ((Event) element).setSuperType(null);
    };
    acceptor.accept(issue, "Remove supertype", _builder.toString(), "delete_obj.gif", _function);
  }
  
  @Fix(IssueCodes.EXCEPTION_HIERARCHY_CYCLE)
  public void removeExceptionCycleInHierarchy(final Issue issue, final IssueResolutionAcceptor acceptor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Remove supertype \'<<issue.data.get(0)>>\' ");
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      ((org.etri.slice.tools.adl.domainmodel.Exception) element).setSuperType(null);
    };
    acceptor.accept(issue, "Remove supertype", _builder.toString(), "delete_obj.gif", _function);
  }
}
