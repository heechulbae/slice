/**
 * generated by Xtext
 */
package org.etri.slice.tools.adl.ui.contentassist;

import com.google.inject.Inject;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.etri.slice.tools.adl.domainmodel.Call;
import org.etri.slice.tools.adl.domainmodel.Command;
import org.etri.slice.tools.adl.domainmodel.CommandContext;
import org.etri.slice.tools.adl.domainmodel.CommandSet;
import org.etri.slice.tools.adl.domainmodel.Context;
import org.etri.slice.tools.adl.domainmodel.Control;
import org.etri.slice.tools.adl.domainmodel.Event;
import org.etri.slice.tools.adl.domainmodel.Property;
import org.etri.slice.tools.adl.domainmodel.Publish;
import org.etri.slice.tools.adl.domainmodel.Situation;
import org.etri.slice.tools.adl.generator.GeneratorUtils;
import org.etri.slice.tools.adl.jvmmodel.CommonInterfaces;
import org.etri.slice.tools.adl.ui.contentassist.AbstractDomainmodelProposalProvider;
import org.etri.slice.tools.adl.ui.contentassist.AcceptInterfaceFilter;
import org.etri.slice.tools.adl.ui.contentassist.AcceptableInstanceFilter;
import org.etri.slice.tools.adl.ui.contentassist.AcceptableSuperTypeFilter;
import org.etri.slice.tools.adl.utils.DomainnodeUtil;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class DomainmodelProposalProvider extends AbstractDomainmodelProposalProvider {
  @Inject
  @Extension
  private DomainnodeUtil _domainnodeUtil;
  
  @Inject
  @Extension
  private ILabelProvider labelProvider;
  
  @Inject
  @Extension
  private ITypesProposalProvider provider;
  
  @Inject
  @Extension
  private IJvmTypeProvider.Factory _factory;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private GeneratorUtils _generatorUtils;
  
  @Override
  public void completeJvmParameterizedTypeReference_Type(final EObject element, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println(("element = " + element));
    Property _containerOfType = EcoreUtil2.<Property>getContainerOfType(element, Property.class);
    boolean _tripleNotEquals = (_containerOfType != null);
    if (_tripleNotEquals) {
      System.out.println(("element instanceof Property **********************" + Boolean.valueOf((element instanceof Property))));
    }
    boolean _matched = false;
    if (element instanceof Control) {
      _matched=true;
      final String fqn = this._generatorUtils.adaptToSlice(this._iQualifiedNameProvider.getFullyQualifiedName(element), "service").toString();
      AcceptInterfaceFilter _acceptInterfaceFilter = new AcceptInterfaceFilter(fqn);
      this.provider.createTypeProposals(this, context, 
        TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptInterfaceFilter, acceptor);
    }
    if (!_matched) {
      if (element instanceof Call) {
        _matched=true;
      }
      if (!_matched) {
        if (element instanceof CommandSet) {
          _matched=true;
        }
      }
      if (_matched) {
        AcceptInterfaceFilter _acceptInterfaceFilter = new AcceptInterfaceFilter();
        this.provider.createTypeProposals(this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptInterfaceFilter, acceptor);
      }
    }
    if (!_matched) {
      if (element instanceof Situation) {
        _matched=true;
        System.out.println("Situation .......................");
        final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(((Situation)element).eResource().getResourceSet());
        final Consumer<Resource> _function = (Resource it) -> {
          System.out.println(("resource = " + it));
        };
        ((Situation)element).eResource().getResourceSet().getResources().forEach(_function);
        final JvmType contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);
        AcceptableInstanceFilter _acceptableInstanceFilter = new AcceptableInstanceFilter();
        this.provider.createSubTypeProposals(contextBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableInstanceFilter, acceptor);
        final JvmType eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);
        AcceptableInstanceFilter _acceptableInstanceFilter_1 = new AcceptableInstanceFilter();
        this.provider.createSubTypeProposals(eventBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableInstanceFilter_1, acceptor);
      }
    }
    if (!_matched) {
      if (element instanceof Context) {
        _matched=true;
        final String fqn = this._generatorUtils.adaptToSlice(this._iQualifiedNameProvider.getFullyQualifiedName(element), "context").toString();
        final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(((Context)element).eResource().getResourceSet());
        final JvmType contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);
        AcceptableSuperTypeFilter _acceptableSuperTypeFilter = new AcceptableSuperTypeFilter(fqn, CommonInterfaces.CONTEXT_BASE);
        this.provider.createSubTypeProposals(contextBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableSuperTypeFilter, acceptor);
      }
    }
    if (!_matched) {
      if (element instanceof Publish) {
        _matched=true;
        final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(((Publish)element).eResource().getResourceSet());
        final JvmType eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);
        AcceptableInstanceFilter _acceptableInstanceFilter = new AcceptableInstanceFilter();
        this.provider.createSubTypeProposals(eventBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableInstanceFilter, acceptor);
      }
    }
    if (!_matched) {
      if (element instanceof Event) {
        _matched=true;
        System.out.println("Event .......................");
        System.out.println(("Event element = " + element));
        String _feature = assignment.getFeature();
        String _plus = ("Event assignment feature = " + _feature);
        System.out.println(_plus);
        EObject _rootModel = context.getRootModel();
        String _plus_1 = ("Event context rootModel = " + _rootModel);
        System.out.println(_plus_1);
        System.out.println(("Event context = " + context));
        final String fqn = this._generatorUtils.adaptToSlice(this._iQualifiedNameProvider.getFullyQualifiedName(element), "event").toString();
        final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(((Event)element).eResource().getResourceSet());
        final JvmType eventBase = typeProvider.findTypeByName(CommonInterfaces.EVENT_BASE);
        AcceptableSuperTypeFilter _acceptableSuperTypeFilter = new AcceptableSuperTypeFilter(fqn, CommonInterfaces.EVENT_BASE);
        this.provider.createSubTypeProposals(eventBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableSuperTypeFilter, acceptor);
      }
    }
    if (!_matched) {
      if (element instanceof org.etri.slice.tools.adl.domainmodel.Exception) {
        _matched=true;
        final String fqn = this._generatorUtils.adaptToSlice(this._iQualifiedNameProvider.getFullyQualifiedName(element), "").toString();
        final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(((org.etri.slice.tools.adl.domainmodel.Exception)element).eResource().getResourceSet());
        final JvmType exceptionBase = typeProvider.findTypeByName(CommonInterfaces.EXCEPTION_INTERFACE);
        AcceptableSuperTypeFilter _acceptableSuperTypeFilter = new AcceptableSuperTypeFilter(fqn, CommonInterfaces.EXCEPTION_INTERFACE);
        this.provider.createSubTypeProposals(exceptionBase, this, context, 
          TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableSuperTypeFilter, acceptor);
      }
    }
    if (!_matched) {
      super.completeJvmParameterizedTypeReference_Type(element, assignment, context, acceptor);
    }
  }
  
  /**
   * AgentDeclaration/CommandSet/Context/property
   */
  @Override
  public void completeCommandContext_Context(final EObject element, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("completeCommandContext_Context .......................");
    final IJvmTypeProvider typeProvider = this._factory.createTypeProvider(element.eResource().getResourceSet());
    final JvmType contextBase = typeProvider.findTypeByName(CommonInterfaces.CONTEXT_BASE);
    AcceptableInstanceFilter _acceptableInstanceFilter = new AcceptableInstanceFilter();
    this.provider.createSubTypeProposals(contextBase, this, context, 
      TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, _acceptableInstanceFilter, acceptor);
  }
  
  /**
   * AgentDeclaration/CommandSet/Context/property
   */
  @Override
  public void completeCommandContext_Property(final EObject element, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    System.out.println("completeCommandContext_Property .......................");
    if ((element instanceof CommandContext)) {
      JvmType _context = ((CommandContext)element).getContext();
      final Consumer<JvmFeature> _function = (JvmFeature feature) -> {
        boolean _matched = false;
        if (feature instanceof JvmField) {
          _matched=true;
          String _simpleName = ((JvmField)feature).getSimpleName();
          String _simpleName_1 = ((JvmField)feature).getSimpleName();
          String _plus = (_simpleName_1 + " - ");
          String _identifier = ((CommandContext)element).getContext().getIdentifier();
          String _plus_1 = (_plus + _identifier);
          acceptor.accept(
            this.createCompletionProposal(_simpleName, _plus_1, this.getImage(feature), context));
        }
      };
      ((JvmGenericType) _context).getAllFeatures().forEach(_function);
    }
  }
  
  /**
   * AgentDeclaration/CommandSet/Command/method
   */
  @Override
  public void completeCommand_Method(final EObject element, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((element instanceof Command)) {
      JvmType _action = ((Command)element).getAction();
      final Consumer<JvmFeature> _function = (JvmFeature feature) -> {
        boolean _matched = false;
        if (feature instanceof JvmOperation) {
          _matched=true;
          String _simpleName = ((JvmOperation)feature).getSimpleName();
          String _simpleName_1 = ((JvmOperation)feature).getSimpleName();
          String _plus = (_simpleName_1 + " - ");
          String _identifier = ((Command)element).getAction().getIdentifier();
          String _plus_1 = (_plus + _identifier);
          acceptor.accept(
            this.createCompletionProposal(_simpleName, _plus_1, this.getImage(feature), context));
        }
        if (!_matched) {
          if (feature instanceof JvmField) {
            _matched=true;
            String _simpleName = ((JvmField)feature).getSimpleName();
            String _simpleName_1 = ((JvmField)feature).getSimpleName();
            String _plus = (_simpleName_1 + " - ");
            String _simpleName_2 = ((Command)element).getAction().getSimpleName();
            String _plus_1 = (_plus + _simpleName_2);
            acceptor.accept(
              this.createCompletionProposal(_simpleName, _plus_1, this.getImage(feature), context));
          }
        }
      };
      ((JvmGenericType) _action).getAllFeatures().forEach(_function);
    }
  }
  
  /**
   * AgentDeclaration/BehaviorSet/Behavior/Action/Call/method
   */
  @Override
  public void completeCall_Method(final EObject element, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((element instanceof Call)) {
      JvmType _control = ((Call)element).getControl();
      final Consumer<JvmFeature> _function = (JvmFeature feature) -> {
        boolean _matched = false;
        if (feature instanceof JvmOperation) {
          _matched=true;
          String _simpleName = ((JvmOperation)feature).getSimpleName();
          String _simpleName_1 = ((JvmOperation)feature).getSimpleName();
          String _plus = (_simpleName_1 + " - Operation");
          acceptor.accept(
            this.createCompletionProposal(_simpleName, _plus, this.getImage(feature), context));
        }
        if (!_matched) {
          if (feature instanceof JvmField) {
            _matched=true;
            String _firstUpper = StringExtensions.toFirstUpper(((JvmField)feature).getSimpleName());
            final String setter = ("set" + _firstUpper);
            acceptor.accept(
              this.createCompletionProposal(setter, (setter + " - Field"), this.getImage(feature), context));
          }
        }
      };
      ((JvmGenericType) _control).getAllFeatures().forEach(_function);
    }
  }
}
