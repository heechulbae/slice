/*
 * generated by Xtext
 */
package org.etri.slice.tools.adl.validation

import org.eclipse.xtext.util.Strings
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ValidationMessageAcceptor
import org.etri.slice.tools.adl.domainmodel.Context
import org.etri.slice.tools.adl.domainmodel.DomainDeclaration
import org.etri.slice.tools.adl.domainmodel.DomainmodelPackage
import org.etri.slice.tools.adl.domainmodel.Feature

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DomainmodelValidator extends AbstractDomainmodelValidator {
	
	@Check def void checkTypeNameStartsWithCapital(Context context) {
		if (!Character::isUpperCase(context.getName().charAt(0))) {
			warning("Name should start with a capital", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME,
				ValidationMessageAcceptor::INSIGNIFICANT_INDEX, IssueCodes::INVALID_TYPE_NAME, context.getName())
		}
	}

	@Check def void checkFeatureNameStartsWithLowercase(Feature feature) {
		if (!Character::isLowerCase(feature.getName().charAt(0))) {
			warning("Name should start with a lowercase", DomainmodelPackage.Literals::FEATURE__NAME,
				ValidationMessageAcceptor::INSIGNIFICANT_INDEX, IssueCodes::INVALID_FEATURE_NAME, feature.getName())
		}
	}

	@Check def void checkPackage(DomainDeclaration domains) {
		if (Strings::isEmpty(domains.getName())) {
			error("Name cannot be empty", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME)
		}
		if (domains.getName().equals("java")) {
			error("Invalid package name", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME)
		}
	}
	
}
