/*
 * generated by Xtext 2.13.0
 */
package org.etri.slice.tools.adl.formatting2

import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter
import org.etri.slice.tools.adl.domainmodel.AbstractElement
import org.etri.slice.tools.adl.domainmodel.Context
import org.etri.slice.tools.adl.domainmodel.DomainDeclaration
import org.etri.slice.tools.adl.domainmodel.DomainModel
import org.etri.slice.tools.adl.domainmodel.Operation
import org.etri.slice.tools.adl.domainmodel.Property

import static org.etri.slice.tools.adl.domainmodel.DomainmodelPackage.Literals.*

class DomainmodelFormatter extends XbaseFormatter {

	def dispatch void format(DomainModel domainmodel, extension IFormattableDocument document) {
		domainmodel.prepend[setNewLines(0, 0, 1); noSpace].append[newLine]
		format(domainmodel.getImportSection(), document);
		for (AbstractElement element : domainmodel.getElements()) {
			format(element, document);
		}
	}

	def dispatch void format(DomainDeclaration pkg, extension IFormattableDocument document) {
		val open = pkg.regionFor.keyword("{")
		val close = pkg.regionFor.keyword("}")
		pkg.regionFor.feature(ABSTRACT_ELEMENT__NAME).surround[oneSpace]
		open.append[newLine]
		interior(open, close)[indent]
		for (AbstractElement element : pkg.elements) {
			element.format
			element.append[setNewLines(1, 1, 2)]
		}
	}

	def dispatch void format(Context entity, extension IFormattableDocument document) {
		val open = entity.regionFor.keyword("{")
		val close = entity.regionFor.keyword("}")
		entity.regionFor.feature(ABSTRACT_ELEMENT__NAME).surround[oneSpace]
		entity.superType.surround[oneSpace]
		open.append[newLine]
		interior(open, close)[indent]
		interior(open, close)[indent]
		format(entity.getSuperType(), document);
		for (Property property : entity.properties) {
			property.format
			property.append[setNewLines(1, 1, 2)]
		}
	}

	def dispatch void format(Property property, extension IFormattableDocument document) {
		property.regionFor.keyword(":").surround[noSpace]
		property.type.format
	}

	def dispatch void format(Operation operation, extension IFormattableDocument document) {
		operation.regionFor.keyword("(").surround[noSpace]
		if (!operation.params.isEmpty) {
			for (comma : operation.regionFor.keywords(","))
				comma.prepend[noSpace].append[oneSpace]
			for (params : operation.params)
				params.format
			operation.regionFor.keyword(")").prepend[noSpace]
		}
		if (operation.type !== null) {
			operation.regionFor.keyword(")").append[noSpace]
			operation.type.prepend[noSpace].append[oneSpace]
			operation.type.format
		} else {
			operation.regionFor.keyword(")").append[oneSpace]
		}
	}
}
